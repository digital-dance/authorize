<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
			>
	<!-- 自动扫描(自动注入) -->
	<context:component-scan base-package="com.digital.dance.*.service;com.digital.dance.*.*.service"/>
	<context:component-scan base-package="com.digital.dance.common.timer"/>
	
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
    	<property name="resultSetLogEnabled" value="true" />
	</bean>
	<!-- 配置数据源 -->
	<bean name="shiroDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
<!--		<property name="driverClassName" value="${spring.datasource.driverClassName}" /> -->
		<property name="url" value="${spring.datasource.url}" />
		<property name="username" value="${spring.datasource.username}" />
		<property name="password" value="${spring.datasource.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" /> 
	    <property name="minIdle" value="${jdbc.minIdle}" /> 
	    <property name="maxActive" value="${jdbc.maxActive}" /> 
	    <property name="maxWait" value="${jdbc.maxWait}" /> 
	    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" /> 
	    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" /> 
	    <property name="validationQuery" value="${jdbc.validationQuery}" /> 
	    <property name="testWhileIdle" value="${jdbc.testWhileIdle}" /> 
	    <property name="testOnBorrow" value="${jdbc.testOnBorrow}" /> 
	    <property name="testOnReturn" value="${jdbc.testOnReturn}" /> 
	    <property name="removeAbandoned" value="${jdbc.removeAbandoned}" /> 
	    <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" /> 
<!--	    <property name="logAbandoned" value="${jdbc.logAbandoned}" /> -->
	    <property name="filters" value="${spring.datasource.filters}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="proxyFilters">
	        <list>
	            <ref bean="log-filter"/>
	        </list>
	    </property>

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
<!--		<property name="filters" value="mergeStat" />-->
	</bean>

	<bean id="shiroSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="shiroDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="mapperLocations"  >
			<list>
				<value>classpath:com/digital/dance/common/mapper/*.xml</value>
				<!--<value>classpath:mapper/*.xml</value>-->
			</list>
		</property>
	</bean>

	<bean id="shiroSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="shiroSqlSessionFactory" />
	</bean>

	<!--<bean id="sRoleService" class="com.digital.dance.permission.service.impl.SRoleServiceImpl" >-->
		<!--<property name="sqlSessionTemplate" ref="shiroSqlSessionTemplate" />-->
		<!--<property name="sqlSessionFactory" ref="shiroSqlSessionFactory" />-->
	<!--</bean>-->

	<!--<bean id="uRoleService" class="com.digital.dance.permission.service.impl.URoleServiceImpl" >-->
		<!--<property name="sqlSessionTemplate" ref="shiroSqlSessionTemplate" />-->
		<!--<property name="sqlSessionFactory" ref="shiroSqlSessionFactory" />-->
	<!--</bean>-->

	<!--<bean id="uPermissionService" class="com.digital.dance.permission.service.impl.UPermissionServiceImpl" >-->
		<!--<property name="sqlSessionTemplate" ref="shiroSqlSessionTemplate" />-->
		<!--<property name="sqlSessionFactory" ref="shiroSqlSessionFactory" />-->
	<!--</bean>-->

	<!--<bean id="uUserService" class="com.digital.dance.user.service.impl.UUserServiceImpl" >-->
		<!--<property name="sqlSessionTemplate" ref="shiroSqlSessionTemplate" />-->
		<!--<property name="sqlSessionFactory" ref="shiroSqlSessionFactory" />-->
	<!--</bean>-->

	<bean id="baseMybatisDao" class="com.digital.dance.core.mybatis.BaseMybatisDao" >
		<property name="sqlSessionFactory" ref="shiroSqlSessionFactory" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.digital.dance.common.dao,com.jzt.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="shiroSqlSessionFactory" />
	</bean>

	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	     <property name="dataSource" ref="shiroDataSource" />
	 </bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="publish*" />
			<tx:method name="save*" />
			<tx:method name="add*" />
			<tx:method name="update*" />
			<tx:method name="insert*" />
			<tx:method name="create*" />
			<tx:method name="del*" />
			<tx:method name="load*" />
			<tx:method name="init*" />




			<tx:method name="*"  read-only="true"/>
		</tx:attributes>
	</tx:advice>
 	<!-- AOP配置-->
	<aop:config>
		<aop:pointcut id="myPointcut"
			expression="execution(public * com.digital.dance.*.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
	</aop:config>
<!--	<aop:config>-->
<!--		<aop:pointcut id="myPointcut"-->
<!--			expression="execution(public * net.wenyifan.*.service.*.*(..))" />-->
<!--		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />-->
<!--	</aop:config>-->
</beans>